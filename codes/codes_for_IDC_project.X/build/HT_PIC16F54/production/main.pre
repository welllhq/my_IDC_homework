
# 1 "main.c"

# 46 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic16f54.h"
volatile control unsigned char OPTION @ 0x000;


volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit PA0 @ ((unsigned)&STATUS*8)+5;
volatile bit PA1 @ ((unsigned)&STATUS*8)+6;
volatile bit PA2 @ ((unsigned)&STATUS*8)+7;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned PA : 3;
};
struct {
unsigned : 5;
unsigned PA0 : 1;
unsigned PA1 : 1;
unsigned PA2 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;
volatile control unsigned char TRISA @ 0x005;

volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit T0CKI @ ((unsigned)&PORTA*8)+4;

volatile union {
struct {
unsigned RA0 : 1;
unsigned RA1 : 1;
unsigned RA2 : 1;
unsigned RA3 : 1;
unsigned T0CKI : 1;
};
} PORTAbits @ 0x005;



volatile unsigned char PORTB @ 0x006;
volatile control unsigned char TRISB @ 0x006;

volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;

volatile union {
struct {
unsigned RB0 : 1;
unsigned RB1 : 1;
unsigned RB2 : 1;
unsigned RB3 : 1;
unsigned RB4 : 1;
unsigned RB5 : 1;
unsigned RB6 : 1;
unsigned RB7 : 1;
};
} PORTBbits @ 0x006;


# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);


# 153
#pragma inline(_delay)
extern void _delay(unsigned long);

# 13 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 27
typedef signed short long int int24_t;

# 34
typedef signed long int int32_t;

# 41
typedef unsigned char uint8_t;

# 47
typedef unsigned int uint16_t;

# 53
typedef unsigned short long int uint24_t;

# 59
typedef unsigned long int uint32_t;

# 67
typedef signed char int_least8_t;

# 74
typedef signed int int_least16_t;

# 81
typedef signed short long int int_least24_t;

# 88
typedef signed long int int_least32_t;

# 95
typedef unsigned char uint_least8_t;

# 101
typedef unsigned int uint_least16_t;

# 107
typedef unsigned short long int uint_least24_t;

# 113
typedef unsigned long int uint_least32_t;

# 122
typedef signed char int_fast8_t;

# 129
typedef signed int int_fast16_t;

# 136
typedef signed short long int int_fast24_t;

# 143
typedef signed long int int_fast32_t;

# 150
typedef unsigned char uint_fast8_t;

# 156
typedef unsigned int uint_fast16_t;

# 162
typedef unsigned short long int uint_fast24_t;

# 168
typedef unsigned long int uint_fast32_t;

# 174
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 12 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdbool.h"
typedef unsigned char bool;

# 16 "lcd.h"
void Lcd_Port(char a);
void Lcd_Cmd(char a);
void Lcd_Clear();
void Lcd_Set_Cursor(char a, char b);
void Lcd_Init();
void Lcd_Write_Char(char a);
void Lcd_Write_String(char *a);
void Lcd_Shift_Right();
void Lcd_Shift_Left();

# 14 "dht11.h"
void DHT11_init(void);
int DHT11_CheckResponse(void);
int DHT11_ReadData(int *hum,int *dhum,int *temp, int *dtemp);

# 19 "system.h"
void ConfigureOscillator(void);

# 13 "user.h"
void InitApp(void);


# 16 "main.c"
#pragma config FOSC = XT
#pragma config WDTE = OFF
#pragma config PWRTE = OFF
#pragma config LVP = OFF

# 29
unsigned int button_scan();
unsigned int analog_read(unsigned int channel);
float voltage_read();
float light_level_check();
void mode_welcome();
void mode_voltage_read();
void mode_light_level_check();
void mode_dht11_read();

void main(void)
{
unsigned int mode_choose_flag = 0 ;

# 50
ConfigureOscillator();
InitApp();
Lcd_Init();
RB3 = 0;
_delay((unsigned long)((5)*(4000000/4000.0)));
while(1)
{
if(button_scan()) mode_choose_flag++;
if(mode_choose_flag>3) mode_choose_flag = 1;
switch(mode_choose_flag){
case 0:
mode_welcome();
break;
case 1:
mode_voltage_read();
break;
case 2:
mode_light_level_check();
break;
case 3:
mode_dht11_read();
break;
}
}

}

unsigned int button_scan(){
static unsigned int key_up = 1;
if(key_up==1&&RB0 == 1){

_delay((unsigned long)((10)*(4000000/4000.0)));

key_up = 0;
if(RB0==1)return 1;
}
else if(RB0==0)key_up = 1;
return 0;
}
unsigned int analog_read(unsigned int channel){

ADFM = 1;
ADCS2 = 1;
VCFG0 = 0;
VCFG1 = 0;
ADCS0 = 0;
ADCS1 = 0;
ADCON0bits.CHS = channel;

ADON =1 ;
_delay((unsigned long)((1)*(4000000/4000.0)));
GO_DONE = 1;
while(ADCON0bits.GO_DONE);
unsigned int ad_value = (ADRESH << 8) + ADRESL;
return ad_value;

}
float voltage_read(){
float voltage ;
float sum_voltage=0;
for(int i=0;i<10;i++){
voltage = (float)analog_read(0)*(5/1023);
sum_voltage=sum_voltage + voltage;
}
return sum_voltage/10;
}
float light_level_check(){
float light_level_value;
float sum_light_level_value =0;
for(int i=0;i<10;i++){
light_level_value = (float)analog_read(1)*(5/1023);
sum_light_level_value=sum_light_level_value + light_level_value;
}
return sum_light_level_value/10;
}
void mode_welcome(){
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("WELCOME");
Lcd_Set_Cursor(2,1);
Lcd_Write_String("PRESS THE BUTTON");
}
void mode_voltage_read(){
float value;
value = voltage_read();
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("voltage(V) is:");
Lcd_Set_Cursor(2,1);
Lcd_Write_String(value);
}
void mode_light_level_check(){
Lcd_Clear();
Lcd_Set_Cursor(1,1);
Lcd_Write_String("Light_LEVEL is:");
Lcd_Set_Cursor(2,1);
if(light_level_check()>4) Lcd_Write_String("DRAK");
else if((light_level_check()<=4)&&(light_level_check()>1))Lcd_Write_String("Bright");
else if((light_level_check()<=1))Lcd_Write_String("Dazzling");
}
void mode_dht11_read(){
int temp=0,humi=0,dhumi=0,dtemp=0;

Lcd_Clear();
DHT11_init();
if(DHT11_CheckResponse){
DHT11_ReadData(&humi,&dhumi,&temp,&dtemp);
Lcd_Set_Cursor(1,1);
Lcd_Write_String("TEMP:"+temp);
Lcd_Set_Cursor(2,1);
Lcd_Write_String("HUMI:"+humi);

if(humi>80||humi<30||temp>30||temp<20)RB3=1;
else RB3=0;
}
else{
Lcd_Set_Cursor(1,1);
Lcd_Write_String("DHT11 ERROR");
}

}
